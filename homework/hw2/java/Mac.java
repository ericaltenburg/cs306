package stevens.cs306.mac;

// I pledge my honor that I have abided by the Stevens Honor System. - Eric Altenburg

import java.security.Key;

// Implement this class
public class Mac extends MacSkeleton {

    /**
     * Implement the mac and verify methods.  Mac should take a message and a
     * key (generated by the generate method) and return a tag.  Verify should
     * take a message, tag, and key -- and authenticate that the tag corresponds
     * to the message/tag pair by returning true or false.
     *
     * The following methods have been made available to you through the
     * MacSkeleton class:
     *
     * byte[] xor(byte[] a, byte[] b) :: XOR two byte arrays. Returns result
     * byte[] pad(byte[] message, int blockSz) :: pads message to blockSz
     * byte[] encryptBlock(byte[] block, Key key) :: Encrypts a single block
     * int getBlockSize() :: Returns the block size of the cipher
     */

    /**
     * Creates a message authentication tag for a message with a given key.
     * @param message   The message to generate a MAC for
     * @param key       A secret key to use for MAC'ing the message
     * @return          A valid tag for the message
     */
    public byte[] mac(byte[] message, Key key) {
        int cipherBlockSize = getBlockSize();
        byte[] paddedCipherBlockSize = pad(message, cipherBlockSize);
        int cipherBlockLen = (message.length/cipherBlockSize) + 1;
        byte[] tag = new byte[cipherBlockSize];

        for (int i = 0; i < cipherBlockLen; i++) {
        	// Make copy
        	byte[] temp = new byte[cipherBlockSize];
        	System.arraycopy(paddedCipherBlockSize, (cipherBlockSize * i), temp, 0, cipherBlockSize);

        	tag = xor(tag, temp);

        	try {
        		tag = encryptBlock(tag, key);
        	} catch (Exception e) {
        		e.printStackTrace();
        		return null;
        	}
        }
        return tag;
    }

    /**
     * Authenticates a message/tag pair with a key.  Returns true if the pair
     * is authentic, else false.
     * @param message   message to authenticate
     * @param tag       a MAC tag to authenticate with the message
     * @param key       secret key to authenticate the tag with
     */
    public boolean verify(byte[] message, byte[] tag, Key key) {
    	byte[] checkedMessage = mac(message, key);

    	if (tag.length != checkedMessage.length) { // outright wrong length
    		return false;
    	} else { // if the right length go through the tag
    		// I'm not sure if we're allowed to use other libraries so i'll leave this commented out
    		// return Arrays.equals(checkedMessage, tag);
    		for (int i = 0; i < tag.length; i++) {
    			if (tag[i] != checkedMessage[i]) {
    				return false;
    			}
    		}
    		return true;
    	}
    }

}

